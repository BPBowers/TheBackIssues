generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model ComicBook {
  id          Int         @id @default(autoincrement())
  issue       Int?
  frontCover  Bytes?
  backCover   Bytes?
  coverPrice  Decimal?
  releaseDate DateTime?
  seriesID    Int
  Series      Series      @relation(fields: [seriesID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  UserOwns    UserOwns[]
  UserWants   UserWants[]
}

model Series {
  id        Int         @id @default(autoincrement())
  title     String?
  publishId Int?
  ComicBook ComicBook[]
  Publisher Publisher?  @relation(fields: [publishId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?

  createdAt     DateTime?   @default(now())
  
  accounts      Account[]
  sessions      Session[]

  UserOwns      UserOwns[]
  UserWants     UserWants[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Publisher {
  id      Int       @id @default(autoincrement())
  name    String?
  founded DateTime?
  Series  Series[]
}

model UserOwns {
  userId      String
  comicBookId Int
  quantity    Int?      @default(1)
  ComicBook   ComicBook @relation(fields: [comicBookId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, comicBookId])
}

model UserWants {
  userId      String
  comicBookId Int
  ComicBook   ComicBook @relation(fields: [comicBookId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  
  @@id([userId, comicBookId])
}
