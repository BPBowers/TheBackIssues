generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model ComicBook {
  id                Int                 @id @default(autoincrement())
  issue             Int?
  frontCover        Bytes?
  backCover         Bytes?
  coverPrice        Decimal?
  releaseDate       DateTime?
  seriesID          Int
  Series            Series              @relation(fields: [seriesID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  UserOwns          UserOwns[]
  UserWants         UserWants[]
  TradeOffer        TradeOffer[]
  TradeWant         TradeWant[]
  CounterOfferOffer CounterOfferOffer[]
  CounterOfferWant  CounterOfferWant[]
}

model Series {
  id        Int         @id @default(autoincrement())
  title     String?
  publishId Int?
  ComicBook ComicBook[]
  Publisher Publisher?  @relation(fields: [publishId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  createdAt DateTime? @default(now())

  accounts Account[]
  sessions Session[]

  UserOwns     UserOwns[]
  UserWants    UserWants[]
  TradePost    TradePost[]
  CounterOffer CounterOffer[]
}

model Creator {
  id            String     @id @default(autoincrement())
  firstName     String
  lastName      String
  Wrote         Wrote[]
  Pencilled     Pencilled[]
  Inked         Inked[]
  Colored       Colored[]
  Lettered      Lettered[]
  CoverArtist   CoverArtist[]
  Edited        Edited[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Publisher {
  id      Int       @id @default(autoincrement())
  name    String?
  founded DateTime?
  Series  Series[]
}

model UserOwns {
  userId      String
  comicBookId Int
  quantity    Int?      @default(1)
  ComicBook   ComicBook @relation(fields: [comicBookId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, comicBookId])
}

model UserWants {
  userId      String
  comicBookId Int
  ComicBook   ComicBook @relation(fields: [comicBookId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, comicBookId])
}

model TradePost {
  id         Int      @id @default(autoincrement())
  userId     String
  location   String? // General area for the meetup
  message    String?
  exactMatch Boolean  @default(true) // if trade must be exact
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user          User           @relation(fields: [userId], references: [id])
  offers        TradeOffer[]
  wants         TradeWant[]
  counterOffers CounterOffer[]
}

model TradeOffer {
  id          Int  @id @default(autoincrement())
  tradePostId Int
  comicBookId Int
  quantity    Int? @default(1)

  tradePost TradePost @relation(fields: [tradePostId], references: [id], onDelete: Cascade)
  comicBook ComicBook @relation(fields: [comicBookId], references: [id], onDelete: Cascade)
}

model TradeWant {
  id          Int  @id @default(autoincrement())
  tradePostId Int
  comicBookId Int
  quantity    Int? @default(1)

  tradePost TradePost @relation(fields: [tradePostId], references: [id], onDelete: Cascade)
  comicBook ComicBook @relation(fields: [comicBookId], references: [id], onDelete: Cascade)
}

model CounterOffer {
  id          Int      @id @default(autoincrement())
  tradePostId Int
  userId      String
  message     String?
  createdAt   DateTime @default(now())

  tradePost TradePost           @relation(fields: [tradePostId], references: [id], onDelete: Cascade)
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  offers    CounterOfferOffer[]
  wants     CounterOfferWant[]
}

model CounterOfferOffer {
  id             Int  @id @default(autoincrement())
  counterOfferId Int
  comicBookId    Int
  quantity       Int? @default(1)

  counterOffer CounterOffer @relation(fields: [counterOfferId], references: [id], onDelete: Cascade)
  comicBook    ComicBook    @relation(fields: [comicBookId], references: [id], onDelete: Cascade)
}

model CounterOfferWant {
  id             Int  @id @default(autoincrement())
  counterOfferId Int
  comicBookId    Int
  quantity       Int? @default(1)

  counterOffer CounterOffer @relation(fields: [counterOfferId], references: [id], onDelete: Cascade)
  comicBook    ComicBook    @relation(fields: [comicBookId], references: [id], onDelete: Cascade)
}
